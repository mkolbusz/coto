package krawczyk.imageviewer;

import com.drew.imaging.ImageProcessingException;
import com.drew.metadata.MetadataException;
import java.awt.Graphics;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;

public class Gui extends javax.swing.JFrame {

    private String directory;
    private JFileChooser fileChooser;
    private Picture picture;
    private DirectoryContents directoryContents;
    private int numberOfImages;
    private int actualImage;
    private String[] path;
    private String metaInfo;
    private Rotate rotatedImage;
    private DefaultTableModel model;
    private final static String[] COLUMN_NAMES = new String[]{"Info", "Data"};

    public Gui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        previousButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        pictureLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        menu = new javax.swing.JMenu();
        item1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1366, 768));

        previousButton.setText("Previous");
        previousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButtonActionPerformed(evt);
            }
        });

        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(table);

        menu.setText("Options");

        item1.setText("Directory...");
        item1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item1ActionPerformed(evt);
            }
        });
        menu.add(item1);

        jMenuBar1.add(menu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pictureLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 976, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(previousButton)
                        .addGap(38, 38, 38)
                        .addComponent(nextButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pictureLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(previousButton)
                            .addComponent(nextButton))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void item1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item1ActionPerformed
        // TODO add your handling code here:
        fileChooser = new JFileChooser();
        if (evt.getSource().equals(item1)) {
            fileChooser = new JFileChooser();
            fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int response = fileChooser.showOpenDialog(menu);
            if (response == JFileChooser.APPROVE_OPTION) {
                directory = fileChooser.getSelectedFile().toString();
                numberOfImages = 0;
                actualImage = 0;
            }
        }
        try {
            directoryContents = new DirectoryContents(directory);
            path = directoryContents.getImagePaths();
            numberOfImages = path.length;
            if (numberOfImages != 0) {
                picture = new Picture(path[0]);
                rotatedImage = new Rotate(picture.getFile(), picture.getImage());
                pictureLabel.setIcon(new ImageIcon(rotatedImage.getRotatedScaledImage(965, 722)));
                metaInfo = picture.getMetaData();
                metaInfo = metaInfo.replaceAll("\\[.*?\\]", "");
                model = new DefaultTableModel(picture.getMetadataArray(), COLUMN_NAMES) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };
                table.setModel(model);
                pictureLabel.setText("");
            } else {
                pictureLabel.setText("No images in this folder.");
            }

        } catch (Exception e) {
            pictureLabel.setText(e.getMessage());
        }

    }//GEN-LAST:event_item1ActionPerformed

    private void previousButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousButtonActionPerformed
        // TODO add your handling code here:
        if ((actualImage - 1) < 0) {
            actualImage = numberOfImages - 1;
        } else {
            actualImage--;
        }
        picture = new Picture(path[actualImage]);
        try {
            rotatedImage = new Rotate(picture.getFile(), picture.getImage());
            pictureLabel.setIcon(new ImageIcon(rotatedImage.getRotatedScaledImage(965, 722)));
        } catch (ImageProcessingException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MetadataException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        }
        metaInfo = picture.getMetaData();
        metaInfo = metaInfo.replaceAll("\\[.*?\\]", "");
        model = new DefaultTableModel(picture.getMetadataArray(), COLUMN_NAMES) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        table.setModel(model);
    }//GEN-LAST:event_previousButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        // TODO add your handling code here:
        if ((actualImage + 1) >= numberOfImages) {
            actualImage = 0;
        } else {
            actualImage++;
        }
        picture = new Picture(path[actualImage]);
        try {
            rotatedImage = new Rotate(picture.getFile(), picture.getImage());
            pictureLabel.setIcon(new ImageIcon(rotatedImage.getRotatedScaledImage(965, 722)));
        } catch (ImageProcessingException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MetadataException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        }
        metaInfo = picture.getMetaData();
        metaInfo = metaInfo.replaceAll("\\[.*?\\]", "");
        model = new DefaultTableModel(picture.getMetadataArray(), COLUMN_NAMES) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        table.setModel(model);
    }//GEN-LAST:event_nextButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem item1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenu menu;
    private javax.swing.JButton nextButton;
    private javax.swing.JLabel pictureLabel;
    private javax.swing.JButton previousButton;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
